// automatically generated by the FlatBuffers compiler, do not modify

namespace FlatBuffersObject
{

using System;
using FlatBuffers;

public sealed class PersonVector : Table {
  public static PersonVector GetRootAsPersonVector(ByteBuffer _bb) { return GetRootAsPersonVector(_bb, new PersonVector()); }
  public static PersonVector GetRootAsPersonVector(ByteBuffer _bb, PersonVector obj) { return (obj.__init(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public PersonVector __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; return this; }

  public Person GetList(int j) { return GetList(new Person(), j); }
  public Person GetList(Person obj, int j) { int o = __offset(4); return o != 0 ? obj.__init(__indirect(__vector(o) + j * 4), bb) : null; }
  public int ListLength { get { int o = __offset(4); return o != 0 ? __vector_len(o) : 0; } }

  public static Offset<PersonVector> CreatePersonVector(FlatBufferBuilder builder,
      VectorOffset listOffset = default(VectorOffset)) {
    builder.StartObject(1);
    PersonVector.AddList(builder, listOffset);
    return PersonVector.EndPersonVector(builder);
  }

  public static void StartPersonVector(FlatBufferBuilder builder) { builder.StartObject(1); }
  public static void AddList(FlatBufferBuilder builder, VectorOffset listOffset) { builder.AddOffset(0, listOffset.Value, 0); }
  public static VectorOffset CreateListVector(FlatBufferBuilder builder, Offset<Person>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<PersonVector> EndPersonVector(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<PersonVector>(o);
  }
};


}
